import 'package:flutter/material.dart';
import 'package:supabase/supabase.dart';
import '../../config/supabase_config.dart';
import 'code_verification_screen.dart';

class LoginScreen extends StatefulWidget {
  const LoginScreen({super.key});

  @override
  State<LoginScreen> createState() => _LoginScreenState();
}

class _LoginScreenState extends State<LoginScreen> {
  final _emailController = TextEditingController();
  final _formKey = GlobalKey<FormState>();
  bool _isLoading = false;

  final _supabase = SupabaseClient(
    SupabaseConfig.supabaseUrl,
    SupabaseConfig.supabaseAnonKey,
    authOptions: const AuthClientOptions(authFlowType: AuthFlowType.implicit),
  );

  @override
  void dispose() {
    _emailController.dispose();
    super.dispose();
  }

  Future<void> _signInWithEmail() async {
    if (!_formKey.currentState!.validate()) return;

    setState(() {
      _isLoading = true;
    });

    try {
      print('üìß –û—Ç–ø—Ä–∞–≤–ª—è–µ–º OTP –Ω–∞: ${_emailController.text.trim()}');

      await _supabase.auth.signInWithOtp(
        email: _emailController.text.trim(),
        shouldCreateUser: true, // –°–æ–∑–¥–∞–≤–∞—Ç—å –Ω–æ–≤—ã—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏
      );

      print('‚úÖ OTP —É—Å–ø–µ—à–Ω–æ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω!');

      if (mounted) {
        // –ü–µ—Ä–µ—Ö–æ–¥–∏–º –Ω–∞ —ç–∫—Ä–∞–Ω –≤–≤–æ–¥–∞ –∫–æ–¥–∞
        Navigator.of(context).push(
          MaterialPageRoute(
            builder: (context) =>
                CodeVerificationScreen(email: _emailController.text.trim()),
          ),
        );
      }
    } on AuthException catch (error) {
      print('üîê AuthException: ${error.message}');
      print('üîê AuthException details: $error');
      if (mounted) {
        _showErrorSnackBar(error.message);
      }
    } catch (error) {
      print('‚ùå –û–±—â–∞—è –æ—à–∏–±–∫–∞ –ø—Ä–∏ –≤—Ö–æ–¥–µ: $error');
      print('‚ùå –¢–∏–ø –æ—à–∏–±–∫–∏: ${error.runtimeType}');
      if (mounted) {
        _showErrorSnackBar('–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞: $error');
      }
    } finally {
      if (mounted) {
        setState(() {
          _isLoading = false;
        });
      }
    }
  }

  void _showErrorSnackBar(String message) {
    ScaffoldMessenger.of(context).showSnackBar(
      SnackBar(
        content: Text(message),
        backgroundColor: Colors.red,
        behavior: SnackBarBehavior.floating,
      ),
    );
  }

  String? _validateEmail(String? value) {
    if (value == null || value.isEmpty) {
      return '–í–≤–µ–¥–∏—Ç–µ email –∞–¥—Ä–µ—Å';
    }

    final emailRegex = RegExp(r'^[\w-\.]+@([\w-]+\.)+[\w-]{2,4}$');
    if (!emailRegex.hasMatch(value)) {
      return '–í–≤–µ–¥–∏—Ç–µ –∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–π email –∞–¥—Ä–µ—Å';
    }

    return null;
  }

  @override
  Widget build(BuildContext context) {
    return Scaffold(
      backgroundColor: Colors.grey[50],
      body: SafeArea(
        child: Center(
          child: SingleChildScrollView(
            padding: const EdgeInsets.all(24.0),
            child: Form(
              key: _formKey,
              child: Column(
                mainAxisAlignment: MainAxisAlignment.center,
                crossAxisAlignment: CrossAxisAlignment.stretch,
                children: [
                  // –õ–æ–≥–æ—Ç–∏–ø –∏ –∑–∞–≥–æ–ª–æ–≤–æ–∫
                  const Icon(
                    Icons.record_voice_over,
                    size: 80,
                    color: Colors.orange,
                  ),
                  const SizedBox(height: 24),
                  Text(
                    '–•–ª–µ–±—É—à–µ–∫ üçû',
                    style: Theme.of(context).textTheme.headlineLarge?.copyWith(
                      fontWeight: FontWeight.bold,
                      color: Colors.orange,
                    ),
                    textAlign: TextAlign.center,
                  ),
                  const SizedBox(height: 8),
                  Text(
                    '–ì–æ–ª–æ—Å–æ–≤—ã–µ —á–∞—Ç—ã —Å –¥—Ä—É–∑—å—è–º–∏',
                    style: Theme.of(
                      context,
                    ).textTheme.bodyLarge?.copyWith(color: Colors.grey[600]),
                    textAlign: TextAlign.center,
                  ),
                  const SizedBox(height: 48),

                  // –ü–æ–ª–µ email
                  TextFormField(
                    controller: _emailController,
                    keyboardType: TextInputType.emailAddress,
                    textInputAction: TextInputAction.done,
                    enabled: !_isLoading,
                    validator: _validateEmail,
                    onFieldSubmitted: (_) => _signInWithEmail(),
                    decoration: InputDecoration(
                      labelText: 'Email –∞–¥—Ä–µ—Å',
                      hintText: 'example@email.com',
                      prefixIcon: const Icon(Icons.email_outlined),
                      border: OutlineInputBorder(
                        borderRadius: BorderRadius.circular(12),
                      ),
                      filled: true,
                      fillColor: Colors.white,
                    ),
                  ),
                  const SizedBox(height: 24),

                  // –ö–Ω–æ–ø–∫–∞ –≤—Ö–æ–¥–∞
                  ElevatedButton(
                    onPressed: _isLoading ? null : _signInWithEmail,
                    style: ElevatedButton.styleFrom(
                      backgroundColor: Colors.orange,
                      foregroundColor: Colors.white,
                      padding: const EdgeInsets.symmetric(vertical: 16),
                      shape: RoundedRectangleBorder(
                        borderRadius: BorderRadius.circular(12),
                      ),
                    ),
                    child: _isLoading
                        ? const SizedBox(
                            height: 20,
                            width: 20,
                            child: CircularProgressIndicator(
                              strokeWidth: 2,
                              valueColor: AlwaysStoppedAnimation<Color>(
                                Colors.white,
                              ),
                            ),
                          )
                        : const Text(
                            '–í–æ–π—Ç–∏ —á–µ—Ä–µ–∑ Email',
                            style: TextStyle(
                              fontSize: 16,
                              fontWeight: FontWeight.w600,
                            ),
                          ),
                  ),
                  const SizedBox(height: 24),

                  // –û–ø–∏—Å–∞–Ω–∏–µ –ø—Ä–æ—Ü–µ—Å—Å–∞
                  Container(
                    padding: const EdgeInsets.all(16),
                    decoration: BoxDecoration(
                      color: Colors.blue.shade50,
                      borderRadius: BorderRadius.circular(12),
                      border: Border.all(color: Colors.blue.shade200),
                    ),
                    child: Column(
                      children: [
                        Icon(
                          Icons.info_outline,
                          color: Colors.blue.shade600,
                          size: 24,
                        ),
                        const SizedBox(height: 8),
                        Text(
                          '–ö–∞–∫ —ç—Ç–æ —Ä–∞–±–æ—Ç–∞–µ—Ç:',
                          style: TextStyle(
                            fontWeight: FontWeight.bold,
                            color: Colors.blue.shade700,
                          ),
                        ),
                        const SizedBox(height: 8),
                        Text(
                          '1. –í–≤–µ–¥–∏—Ç–µ –≤–∞—à email –∞–¥—Ä–µ—Å\n'
                          '2. –ú—ã –æ—Ç–ø—Ä–∞–≤–∏–º —Å—Å—ã–ª–∫—É –¥–ª—è –≤—Ö–æ–¥–∞\n'
                          '3. –ù–∞–∂–º–∏—Ç–µ –Ω–∞ —Å—Å—ã–ª–∫—É –≤ –ø–∏—Å—å–º–µ\n'
                          '4. –î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å –≤ –•–ª–µ–±—É—à–µ–∫! üéâ',
                          style: TextStyle(
                            color: Colors.blue.shade600,
                            height: 1.5,
                          ),
                          textAlign: TextAlign.center,
                        ),
                      ],
                    ),
                  ),
                ],
              ),
            ),
          ),
        ),
      ),
    );
  }
}
